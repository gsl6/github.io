<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>多表查询和子查询</title>
    <link href="/2020/05/28/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <url>/2020/05/28/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><p>分析：1.查询的字段</p><p>​            2.查询所需要的条件</p><p>​            3.需要查询几张表</p><p>一.非等值查询</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>语法：select 列名<span class="hljs-number">1</span>，列名<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span>，表<span class="hljs-number">2</span>此查询会造成大量数据冗余</code></pre><p>二.等值查询</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>语法：select 列名<span class="hljs-number">1</span>，列名<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span>，表<span class="hljs-number">2</span>  加上约束条件</code></pre><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><p>一.内连接查询</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200528201813919.png" srcset="/img/loading.gif" style="zoom: 80%;" /> result表</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200528201950816.png" srcset="/img/loading.gif" style="zoom:80%;" />subject表</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200528202206131.png" srcset="/img/loading.gif" style="zoom:80%;" />student表</p><p>匹配规则：取的是两表的交集<br>例：查询参加了考试的同学信息（学号、学生姓名、科目编号、分数）</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.StudentNo,s.StudentName,r.SubjectNo,r.StudentResult     <span class="hljs-keyword">FROM</span> student s,<span class="hljs-keyword">result</span> r <span class="hljs-keyword">WHERE</span> s.StudentNo=r.StudentNo          <span class="hljs-keyword">SELECT</span> s.StudentNo,s.StudentName,r.SubjectNo,r.StudentResult     <span class="hljs-keyword">FROM</span> student s <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r <span class="hljs-keyword">ON</span> s.StudentNo=r.StudentNo</code></pre><ol><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200528202628613.png" srcset="/img/loading.gif" style="zoom:80%;" /></li></ol><p>二.左外连接</p><p>匹配的规则：以左表为基准，右表一一匹配，匹配不上的，左表依赖显示，右表设置为null<br>例：查询出所有同学，不考试的也查出来</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.StudentNo,s.StudentName,r.StudentResult,r.SubjectNo   <span class="hljs-keyword">FROM</span> student s <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r <span class="hljs-keyword">ON</span> s.StudentNo=r.StudentNo</code></pre> <!--student表为左表，result表为右表--><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200528203551326.png" srcset="/img/loading.gif" style="zoom: 50%;" /><p>三.右外连接</p><p>匹配的规则：以右表为基准，左表一一匹配，匹配不上的，右表依赖显示，左表设置为null<br>例：查一下缺考的同学</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.StudentNo,s.StudentName,r.SubjectNo,r.StudentResult    <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span> r <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> student s <span class="hljs-keyword">ON</span> r.StudentNo=s.StudentNo        <span class="hljs-keyword">WHERE</span> r.StudentResult <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span></code></pre><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200528211533116.png" srcset="/img/loading.gif" style="zoom:80%;" /><p>四.子查询</p><p>定义 :一个完整的查询语句 嵌套另一个完整的查询语句</p><ol><li><p>第一种形式 把一个子查询的结果当做另一个子查询的条件来使用</p><p>例：查询参加了考试的同学信息（学号、学生姓名、科目名、分数）</p></li></ol><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> s.studentNo,s.studentName,sub.SubjectName,r.studentResult <span class="hljs-keyword">FROM</span> student s <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> result r <span class="hljs-keyword">ON</span> s.studentNo = r.studentNo <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-symbol">`subject`</span> sub <span class="hljs-keyword">ON</span> r.subjectNo=sub.SubjectNo</code></pre><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200528213038051.png" srcset="/img/loading.gif" style="zoom:80%;" /><p>子查询与连接查询嵌套:</p><p>例：查询《数据库结构-1》的所有考试结果，并按成绩由高到低排列</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.StudentNo,s.StudentName,r.StudentResult,sub.subjectName <span class="hljs-keyword">FROM</span> student s <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r <span class="hljs-keyword">ON</span> s.StudentNo=r.StudentNo<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-string">`subject`</span> sub <span class="hljs-keyword">ON</span> sub.subjectNo=r.SubjectNo <span class="hljs-keyword">WHERE</span> sub.subjectName=<span class="hljs-string">"数据库结构-1"</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> r.StudentResult <span class="hljs-keyword">DESC</span></code></pre><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200528212057106.png" srcset="/img/loading.gif" style="zoom:80%;" /><p>2.第二种子查询的方式:</p><p>   把子查询查询出的结果当成列来进行显示:</p><p>例：查询课程为《高等数学-2》且分数不小于80分的学生的学号和姓名</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.StudentNo,s.StudentName <span class="hljs-keyword">FROM</span> student s <span class="hljs-keyword">WHERE</span> s.StudentNo<span class="hljs-keyword">IN</span>(<span class="hljs-keyword">SELECT</span> r.StudentNo <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span> r <span class="hljs-keyword">WHERE</span> r.StudentResult&gt;=<span class="hljs-number">80</span><span class="hljs-keyword">AND</span> r.SubjectNo <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> sub.SubjectNo <span class="hljs-keyword">FROM</span> <span class="hljs-string">`subject`</span> sub <span class="hljs-keyword">WHERE</span> sub.SubjectName=<span class="hljs-string">"高等数学-2"</span>));</code></pre> <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200528213818971.png" srcset="/img/loading.gif" style="zoom: 80%;"                      />   <p>总结一下：</p><pre><code class="hljs sql"><span class="hljs-comment">/* 子查询 */</span> <span class="hljs-comment">------------------</span>    - 子查询需用括号包裹。<span class="hljs-comment">-- from型</span>    from后要求是一个表，必须给子查询结果取个别名。    - 简化每个查询内的条件。    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。    - 子查询返回一个表，表型子查询。    <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>&gt;<span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> subfrom <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>&gt;<span class="hljs-number">1</span>;    <span class="hljs-comment">-- where型</span>    - 子查询返回一个值，标量子查询。    - 不需要给子查询取别名。    - where子查询内的表，不能直接用以更新。    <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb <span class="hljs-keyword">where</span> money = (<span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(money) <span class="hljs-keyword">from</span> tb)    <span class="hljs-comment">-- 列子查询</span>        如果子查询结果返回的是一列。        使用 <span class="hljs-keyword">in</span> 或 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> 完成查询        <span class="hljs-keyword">exists</span> 和 <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> 条件            如果子查询返回数据，则返回<span class="hljs-number">1</span>或<span class="hljs-number">0</span>。常用于判断条件。            <span class="hljs-keyword">select</span> column1 <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t2);<span class="hljs-comment">-- 行子查询</span>        查询条件是一个行。        <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> (<span class="hljs-keyword">id</span>, gender) <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>, gender <span class="hljs-keyword">from</span> t2);        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。        <span class="hljs-comment">-- 特殊运算符</span>    != all()    相当于 not in    = some()    相当于 in。any 是 some 的别名    != some()   不等同于 not in，不等于其中某一个。    all, some 可以配合其他运算符一起使用。</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql</title>
    <link href="/2020/05/28/mysql/"/>
    <url>/2020/05/28/mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a><strong>mysql</strong></h1><h5 id="一-创建数据库"><a href="#一-创建数据库" class="headerlink" title="一.创建数据库"></a>一.创建数据库</h5><ol><li>创建一个数据库 </li></ol><p>​          语法:  create  database  数据库的库名</p><p>   2.在创建数据库的时候给其设置编码格式 </p><p>​           语法：create  database  数据库的库名  character  set  utf8</p><p>   3.在创建数据库的时候 判断数据库 是否存在</p><p>​          语法：create database  if not exists   数据库名</p><p>   4.创建并查看数据库的结构</p><p>​         语法：show  create  database  数据库的库名</p><p>   5.修改数据库的编码格式</p><p>​         语法： alter  database  数据库的库名  character  set gbk</p><p>   6.切换到具体的某一个数据库</p><p>​         语法：use  数据库的库名</p><p>   7.查看所有的数据库</p><p>​         语法： show  databases</p><p>​    8.删库跑路</p><p>​       语法： drop  database   数据库的库名</p><h5 id="二-数据类型"><a href="#二-数据类型" class="headerlink" title="二.数据类型"></a>二.数据类型</h5><ol><li><p>int  整形 </p></li><li><p>double 小数</p></li><li><p>char  字符串  不可以变的字符串  不管数据的多少 都会占 设置的长度  不够的使用””来代替 一般用于设置固定长度的字符型(性别 男 或者是女)</p></li><li><p>varchar ==&gt;可变 的字符串  根据数据来设置其长度 </p></li><li><p>date <!--年月日--></p></li><li><p>datetime  年月日 时分秒</p></li></ol><h5 id="三-创建表"><a href="#三-创建表" class="headerlink" title="三.创建表"></a>三.创建表</h5><ol><li><p>语法:</p><p>   create  table  表名(</p><p>​       列名1  数据类型(长度),</p><p>​       列名2  数据类型(长度),</p><p>​       列名3  数据类型(长度）</p><p>);</p><!--注意 一定要切入到对应的数据库  use  数据库的名字--></li></ol><ol start="2"><li>查看表创建的结构:</li></ol><p>​           语法： desc  表名</p><ol start="3"><li>修改表的名字</li></ol><p>​           语法：alter  table  表名  rename  to  新的表名</p><ol start="4"><li>查看当前库中所有表</li></ol><p>​          语法：show  tables </p><ol start="5"><li>新增加一列</li></ol><p>​          语法：alter  table  表名  add  列名  数据类型(长度);</p><ol start="6"><li>只修改数据类型 </li></ol><p>​           语法：alter  table  表名  modify  列名  数据类型(长度)</p><ol start="7"><li>修改列名</li></ol><p>​           语法：alter  table  表名  change  原列名  新的列名 数据类型(长度)</p><h5 id="四-DML语句"><a href="#四-DML语句" class="headerlink" title="四.DML语句"></a>四.DML语句</h5><h5 id="1-插入语句"><a href="#1-插入语句" class="headerlink" title="1.插入语句"></a>1.插入语句</h5><ul><li><p>插入一条数据:</p><p>​         语法： insert into 表名 (sid,sname,spwd,createTime)values(值1,值2，值3，值4)</p></li><li><p>不指定列名 按照顺序来进行插入(不常用 容易出现错误)</p><p>​         语法：  insert  into  表名  values(插入的值1,插入的值2);</p><p>​         注意: 必须所以的列都要插入值</p></li></ul><ul><li>插入多条数据</li></ul><p>​          语法:  insert  into 表名  value(第一组值),(第二组值)</p><p>​           注意事项 ：</p><p>​            列名必须是表名存在的  </p><p>​             列名的类型与插入值的类型要对应</p><p>​             插入的是事件类型 一定要加上单引号</p><h5 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h5><ul><li>修改一个列</li></ul><p>​            语法： update 表名  set  列名=1数据  where 条件</p><ul><li><p>修改多个列</p><pre><code>语法：update  表名  set 列名=数据1,列名2=数据2  where  条件</code></pre></li><li><p>修改表中所有的数据</p><p>​             语法： update  表名  set  列名=数据1, 列名2=数据2  </p></li></ul><h5 id="3-删除"><a href="#3-删除" class="headerlink" title="3,.删除"></a>3,.删除</h5><p>​         语法：delete  from  表名  where  条件</p><p>​          删除所有的数据 ：delete  from  表名        一定要慎用</p><h5 id="4-查询语句"><a href="#4-查询语句" class="headerlink" title="4.查询语句"></a>4.查询语句</h5><ul><li><p>查询语句的关键子是select   from  </p><p> *表示查询所有的数据,也可以根据具体的字段来查询指定的</p></li><li><p>去重复  DISTINCT </p></li><li><p>设置别名 关键字是 as  as可以给表 设置 也可以列设置  as可以省略</p></li><li><p>根据条件来进行查询</p><p>关键字:where  or 或者 and  并且  between and  在什么范围之类 </p></li><li><p>模糊查询 like  % 匹配所以  _匹配一个字符</p></li><li><p>is  not  null  ，is  null   这里null 并不是” ”，is null是指没有插入数据</p></li><li><p>分页查询的关键字 limit 参数1， 参数2  参数1表示数据索引  参数2表示页量</p><p>索引：（当前页-1）*页量</p></li><li><p>升序 与降序  order by      asc 升   desc  降</p></li><li><p>聚合函数   count()   sum()   max()  min()    avg()</p></li><li><p>分组 关键字 group  by </p></li><li><p>过滤使用的是 having </p></li><li><p>having 过滤 与where的区别  一个是分组前where  having是在分组后</p></li><li><p>查询语句不能随便调换位置 </p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
